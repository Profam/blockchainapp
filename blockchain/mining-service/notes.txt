Наверняка вы обратили внимание, что не хватает одной настройки для Hibernate, а именно spring.jpa.hibernate.ddl-auto.
В большинстве руководств для начинающих для нее указывают значение update, благодаря которому Hibernate будте сама
создавать и корректировать структуру таблиц на сервере, основываясь на присутствующих в проекте классах сущностей.
Такой подход вполне может быть использован, если схема данных очень простая или проект учебный, но при сколь-нибудь
сложной схеме скорее всего начнутся проблемы хотя бы из-за того, что мы никак не можем контролировать процесс генерации
Hibernate-ом DDL скриптов. Ещё одна проблемная состоит в том, что при таком подходе нет простого способа откатить
сделанные Hibernate изменения в структуре БД.

Именно для решения выше описанных проблем мы и будем использовать утилиту Liquibase. На наше счастье, она отлично умеет
интегрироваться со Spring Boot приложениями! Чтобы начать её использовать, необходимо выполнить следующие действия

Добавляем в файл application.properties настройку

spring.jpa.hibernate.ddl-auto=none

Это нужно для того, чтобы Hibernate не выполнял никаких действий по модификации схемы, т.к. теперь их будет делать
Liquibase. Теоретически, тут можно использовать еще и значение validate для дополнительного контроля правильности
структуры таблиц.

logging.level.org.springframework.main.java.by.rabtsevich.web= trace
logging.level.org.apache= trace


/* @GetMapping("/blocks/{id}")
    public by.rabtsevich.pojo.Block block(@PathVariable int id) {
        return blockService.findBlockById(id);
    }

    */

    //@PostMapping("/blocks/{previousHash}")
    //@PathVariable String previousHash,